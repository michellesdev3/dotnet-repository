<Project>

  <!-- Get the analyzer from the CommunityToolkit.Mvvm NuGet package -->
  <Target Name="_MVVMToolkitGatherAnalyzers">
    <ItemGroup>
      <_MVVMToolkitAnalyzer Include="@(Analyzer)" Condition="'%(Analyzer.NuGetPackageId)' == 'CommunityToolkit.Mvvm'" />
    </ItemGroup>
  </Target>

  <!-- Remove the analyzer if using Roslyn 3.x (incremental generators require Roslyn 4.x) -->
  <Target Name="_MVVMToolkitRemoveAnalyzersForRoslyn3"
          AfterTargets="ResolvePackageDependenciesForBuild;ResolveNuGetPackageAssets"
          DependsOnTargets="_MVVMToolkitGatherAnalyzers">

    <PropertyGroup>
      
      <!-- If CSharpCoreTargetsPath is not empty, the Roslyn path is the directory name from there -->
      <RoslynDirectoryName Condition="$(CSharpCoreTargetsPath) != ''">$([System.IO.Path]::GetDirectoryName($(CSharpCoreTargetsPath))</RoslynDirectoryName>
      
      <!-- Otherwise, fallback to $(MSBuildBinPath)\Roslyn\ -->
      <RoslynDirectoryName Condition="$(RoslynDirectoryName) == ''">$([System.IO.Path]::Combine(`$(MSBuildBinPath)`,`Roslyn`))</RoslynDirectoryName>
      
      <!-- Actually check that Microsoft.Build.Tasks.CodeAnalysis.dll exists at the resolved location.
           If it doesn't (eg. if the consuming project is a .wapproj project), remove the analyzer.
           In that case, the warning will also not be emitted, as there are no C# files to compile anyway. -->
      <RoslynAssemblyPath>$([System.IO.Path]::Combine(`$(RoslynDirectoryName)`,`Microsoft.Build.Tasks.CodeAnalysis.dll`))</RoslynAssemblyPath>
      <IsRoslynAssemblyPresent Condition="$([System.IO.File]::Exists(`$(RoslynAssemblyPath)`)">true</IsRoslynAssemblyPresent>
      <IsRoslynAssemblyPresent Condition="$(IsRoslynAssemblyPresent) == ''">false</IsRoslynAssemblyPresent>
    </PropertyGroup>

    <Choose>
      <When Condition="$(IsRoslynAssemblyPresent) == 'true'">

        <!-- Use the CSharpCoreTargetsPath property to find the version of the compiler we are using. This is the same mechanism
             MSBuild uses to find the compiler. We could check the assembly version for any compiler assembly (since they all have
             the same version) but Microsoft.Build.Tasks.CodeAnalysis.dll is where MSBuild loads the compiler tasks from so if
             someone is getting creative with msbuild tasks/targets this is the "most correct" assembly to check. -->
        <GetAssemblyIdentity AssemblyFiles="$(RoslynAssemblyPath)">
          <Output TaskParameter="Assemblies" ItemName="CurrentCompilerAssemblyIdentity"/>
        </GetAssemblyIdentity>

        <PropertyGroup>

          <!-- Transform the resulting item from GetAssemblyIdentity into a property representing its assembly version -->
          <CurrentCompilerVersion>@(CurrentCompilerAssemblyIdentity->'%(Version)')</CurrentCompilerVersion>

          <!-- The CurrentCompilerVersionIsNotNewEnough property can now be defined based on the Roslyn assembly version -->
          <CurrentCompilerVersionIsNotNewEnough Condition="$([MSBuild]::VersionLessThan($(CurrentCompilerVersion), 4.0))">true</CurrentCompilerVersionIsNotNewEnough>
          <CurrentCompilerVersionIsNotNewEnough Condition="$(CurrentCompilerVersionIsNotNewEnough) == ''">false</CurrentCompilerVersionIsNotNewEnough>
        </PropertyGroup>

        <!-- If the Roslyn version is < 4.0, disable the source generators -->
        <ItemGroup Condition ="$(CurrentCompilerVersionIsNotNewEnough) == 'true'">
          <Analyzer Remove="@(_MVVMToolkitAnalyzer)"/>
        </ItemGroup>

        <!-- If the source generators are disabled, also emit a warning. This would've been produced by MSBuild itself as well, but
             emitting this manually lets us customize the message to inform developers as to why exactly the generators have been
             disabled, and that the rest of the MVVM Toolkit will still keep working as intended, just without additional features. -->
        <Warning Condition ="$(CurrentCompilerVersionIsNotNewEnough) == 'true'" Text="The MVVM Toolkit source generators have been disabled on the current configuration, as they need Roslyn 4.x in order to work. The MVVM Toolkit will work just fine, but features relying on the source generators will not be available."/>
      </When>

      <Otherwise>

        <!-- If no Roslyn assembly could be found, just remove the analyzer without emitting a warning -->
        <ItemGroup>
          <Analyzer Remove="@(_MVVMToolkitAnalyzer)"/>
        </ItemGroup>
      </Otherwise>
    </Choose>    
  </Target>

</Project>
